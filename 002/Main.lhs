
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not
exceed four million.

> module Main where

> import Prelude
> import qualified System
> import qualified IO

> fibs :: [Integer]
> fibs = 1 : zipWith (+) fibs (1 : fibs)

> euler2 :: Integer -> Integer
> euler2 n = sum (filter (\x -> x `mod` 2 == 0) 
>                 (takeWhile (\x -> x <= n) fibs))

> main :: IO ()
> main = 
>   do args <- System.getArgs 
>      case args of
>       [] -> print "Usage: Euler <int>" 
>       h : _ -> putStr ("Sum up to " ++ show h ++
>                        " is " ++ show (euler2 (read h)))

~/save/versioned/projects/compiler/euler/2
$ Euler 4000000
Sum up to "4000000" is 4613732

