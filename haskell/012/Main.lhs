
The sequence of triangle numbers is generated by adding the natural
numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6
+ 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?

> module Main where

> import Prelude
> import qualified System
> import qualified IO
> import qualified List
> import qualified Data.Map as Map
> import qualified EulerLib as Lib

> triangle :: Integer -> Integer
> triangle n = n * (n+1) `div` 2

> triangles :: [Integer]
> triangles = map triangle [1 ..]

> numDivisors :: Integer -> Integer
> numDivisors n = 
>   if n == 1 then 1 else
>   let pds = Lib.primeDivisors n 
>       (num, _) = Map.fold foldFn (1, []) pds 
>         where foldFn x (prod, seen) = 
>                 if elem x seen
>                   then (prod, seen)
>                 else ((count x pds + 1) * prod, x : seen)
>               count x pds = maybe 0 id (Map.lookup x pds) 
>   in num

> euler12 :: Integer -> Integer
> euler12 n = 
>   case List.find (\k -> numDivisors k > n) triangles of
>     Nothing -> error "Impossible" 
>     Just n -> n

> main :: IO ()
> main = 
>   do args <- System.getArgs 
>      case args of
>       [] -> print "Usage: Euler <int>" 
>       h : _ -> putStr ("First triangular number with over " ++ show h ++
>                        " divisors is " ++ show (euler12 (read h)))




