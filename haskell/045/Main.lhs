
Triangle, pentagonal, and hexagonal numbers are generated by the
following formulae:

Triangle 	  	T_(n)=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	P_(n)=n(3n−1)/2 	1, 5, 12, 22, 35, ...
Hexagonal 	  	H_(n)=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T_(285) = P_(165) = H_(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

> module Main where

> import Prelude 

> tri, pent, hex :: [Integer]
> tri = [(n * (n + 1)) `div` 2 | n <- [1 ..]]
> pent = [(n * (3 * n - 1)) `div` 2 | n <- [1 ..]]
> hex = [(n * (2 * n - 1)) | n <- [1 ..]]

> merge :: Ord a => [a] -> [a] -> [a]
> merge [] l = l
> merge l [] = l
> merge (l1@(h1:t1)) (l2@(h2:t2)) = 
>   if h1 == h2 then h1 : merge t1 t2 
>   else if h1 < h2 then merge t1 l2 
>   else merge l1 t2

> solution :: [Integer]
> solution = take 3 (merge (merge tri pent) hex)

> main :: IO ()
> main = putStr ("Solution: " ++ show solution)

~/save/versioned/projects/compiler/euler/045
$ time Euler
Solution: [1,40755,1533776805]
real	0m0.041s
user	0m0.034s
sys	0m0.005s

